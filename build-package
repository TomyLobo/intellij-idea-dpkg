#!/bin/bash

set -e
#set -x

usage() {
  echo "usage: $0 -f [IU | IC] -p [solaris | debian] [-v version]" >/dev/stderr
  exit 1
}

fetch_latest() {
  if [ "$IDEA_URL" = "" ]
  then
    IDEA_URL="http://confluence.jetbrains.net/display/IDEADEV/Maia+EAP"
  fi

  echo "Downloading and parsing... $IDEA_URL"
  read url filename version < <(wget -O - -q $IDEA_URL | LC_ALL=C sed -n -e "/.*\"\(http:\/\/.*\/idea$flavor-.*tar.gz\)\".*/ {
    s,.*\"\(http:\/\/.*\/idea$flavor-.*tar.gz\)\".*,\1,p
    s,.*\(ideaI.-[0-9]*.[0-9]*.tar.gz\).*,\1,p
    s,.*-\([0-9]*.[0-9]*\).tar.gz,\1,p
  }" | xargs)

  echo "Latest version is $version, downloading..."

  mkdir -p download

  # It would be possible to use the MD5 sum as a check here, then there would be no need to every force a download
  #if [ -r "download/$filename" ]
  #then
  #  echo "$filename is already downloaded"
  #else
  #  echo "Downloading $url..."
  #  wget -O "download/$filename" $url
  #fi

  wget -q -P download -N $url
}

build_common() {
  rm -rf root
  mkdir -p root/usr/share/jetbrains/intellij-idea
  mkdir -p root/usr/bin

  echo "Unpacking tarball"
  $tar --strip-components 1 -C root/usr/share/jetbrains/intellij-idea -zxf download/$filename

  cp idea.in root/usr/bin/idea
  chmod +x root/usr/bin/idea

  mkdir -p root/usr/share/applications
  cp intellij-idea.desktop root/usr/share/applications/intellij-idea.desktop
}

build_solaris() {
  build_common 

  rm -rf solaris
  mkdir -p solaris

  cp root/usr/share/jetbrains/intellij-idea/bin/idea.vmoptions solaris/
  cat solaris/idea.vmoptions | grep -v yjpagent > root/usr/share/jetbrains/intellij-idea/bin/idea.vmoptions

  sed -e "s,@VERSION@,$version," pkginfo.in > solaris/pkginfo
  cp prototype.in solaris/prototype
  pkgproto root=/ | awk '
   {$5="root"}
   $3 ~ /^\/$/ {getline} 
   $3 ~ /^\/usr$/ {getline}
   $3 ~ /^\/usr\/bin$/ {getline}
   $3 ~ /^\/usr\/share$/ {getline}
   $3 ~ /^\/usr\/share\/applications$/ {getline}
   {printf $1 " " $2 " " $3 " " $4 " " $5 " " $6 " \n"}' >> solaris/prototype
  pkgmk -o -d solaris -f solaris/prototype -r .

  repo=`pwd`/repository/solaris/`uname -p`/`uname -r`
  mkdir -p $repo
  pkg_filename=$repo/intellij-idea-$version-`uname -s``uname -r`-`uname -p`.pkg
  pkgtrans -s solaris $pkg_filename intellij-idea
  echo "The package was successfully build in solaris/"
  echo "To install run: pfexec pkgadd -d $pkg_filename"
}

build_debian() {
  build_common
  mkdir -p root/DEBIAN

  if [ $flavor = "IC" ]
  then
    OTHER_FLAVOR_LOWER=iu
    OTHER_FLAVOR=IU
    FLAVOR_LOWER=ic
  else
    OTHER_FLAVOR_LOWER=ic
    OTHER_FLAVOR=IC
    FLAVOR_LOWER=iu
  fi

  sed \
    -e "s,OTHER_FLAVOR_LOWER,$OTHER_FLAVOR_LOWER," \
    -e "s,OTHER_FLAVOR,$OTHER_FLAVOR," \
    -e "s,FLAVOR_LOWER,$FLAVOR_LOWER," \
    -e "s,FLAVOR,$flavor," \
    -e "s,VERSION,$version," \
    control.in > root/DEBIAN/control

  # TODO: Add arch to the filename (i386, amd64)
  mkdir -p repository/debian
  deb_filename=repository/debian/intellij-idea-$FLAVOR_LOWER-$version.deb

  touch fakeroot.save
  FAKEROOT="fakeroot -i fakeroot.save -s fakeroot.save"
  $FAKEROOT -- chown -R root:root root/
  $FAKEROOT -- dpkg-deb -b root $deb_filename
}

tar=`which gtar || true`
if [ ! -x "$tar" ]
then
  tar=`which tar`
  if [ ! -x "$tar" ]
 then
    echo "Could not find usable tar" >/dev/stderr
    exit 1
  fi
fi

while getopts "f:p:v:" flag
do
  case "$flag" in
    f) 
      flavor=$OPTARG

      if [ "$flavor" != "IU" -a "$flavor" != "IC" ]
      then
        usage
      fi
      ;;
    p) 
      platform=$OPTARG

      if [ "$platform" != "solaris" -a "$platform" != "debian" ]
      then
        usage
      fi
      ;;
    v)
      version=$OPTARG
      ;;
  esac
done

if [ -z "$flavor" -o -z "$platform" ]
then
  usage
fi

if [ -z "$version" ]
then
  echo "Fetching latest version"
  fetch_latest
else
  echo "Fetching version $version..."
  wget -q -P download -N http://download.jetbrains.com/idea/idea$flavor-$version.tar.gz
  filename=idea$flavor-$version.tar.gz
fi

case "$platform" in
  solaris)
    build_solaris;;
  debian)
    build_debian;;
esac
